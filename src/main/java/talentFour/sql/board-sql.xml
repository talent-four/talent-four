<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<comment>board-sql.xml</comment>

	<!-- 대분류 가져오기 -->
	<entry key="getMainCategory">
		SELECT CATEGORY_CODE, CATEGORY_NAME
		FROM CATEGORY
		WHERE PARENT_ID IS NULL
		ORDER BY CATEGORY_CODE
	</entry>
	
	<!-- 소분류 가져오기 -->
	<entry key="getSubCategory">
		SELECT CATEGORY_CODE, CATEGORY_NAME, PARENT_ID
		FROM CATEGORY
		WHERE PARENT_ID = ?
		ORDER BY CATEGORY_CODE
	</entry>
	
	<!-- 클래스 전부 가져오기 -->
	<entry key="getAllClasses">
		SELECT C.*, M.MEMBER_NM, NVL(CR.리뷰수, 0) AS 리뷰수, NVL(TRUNC(CR.평점, 1), 0) AS 평점, C.CLASS_CREATE_DT AS 날짜
		FROM CLASS C
		JOIN MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN (
		    SELECT C.CLASS_NO, COUNT(R.CLASS_NO) AS 리뷰수, AVG(R.REVIEW_STAR) AS 평점
		    FROM CLASS C
		    LEFT JOIN REVIEW R ON C.CLASS_NO = R.CLASS_NO
		    GROUP BY C.CLASS_NO) CR ON C.CLASS_NO = CR.CLASS_NO
		WHERE CLASS_STATUS = 1
	</entry>
	
	<!-- 검색된 클래스 가져오기 -->
	<entry key="getQueryClasses">
		SELECT C.*, M.MEMBER_NM, NVL(CR.리뷰수, 0) AS 리뷰수, NVL(TRUNC(CR.평점, 1), 0) AS 평점, C.CLASS_CREATE_DT AS 날짜
		FROM CLASS C
		JOIN MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN (
		    SELECT C.CLASS_NO, COUNT(R.CLASS_NO) AS 리뷰수, AVG(R.REVIEW_STAR) AS 평점
		    FROM CLASS C
		    LEFT JOIN REVIEW R ON C.CLASS_NO = R.CLASS_NO
		    GROUP BY C.CLASS_NO) CR ON C.CLASS_NO = CR.CLASS_NO
		WHERE CLASS_STATUS = 1 AND C.CLASS_NAME LIKE ?
	</entry>
	
	
	<!-- 대분류로 클래스 가져오기 -->
	<entry key="getMainClasses">
		SELECT C.*, M.MEMBER_NM, NVL(CR.리뷰수, 0) AS 리뷰수, NVL(TRUNC(CR.평점, 1), 0) AS 평점, C.CLASS_CREATE_DT AS 날짜
		FROM CLASS C
		JOIN MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN (
		    SELECT C.CLASS_NO, COUNT(R.CLASS_NO) AS 리뷰수, AVG(R.REVIEW_STAR) AS 평점
		    FROM CLASS C
		    LEFT JOIN REVIEW R ON C.CLASS_NO = R.CLASS_NO
		    GROUP BY C.CLASS_NO) CR ON C.CLASS_NO = CR.CLASS_NO
		WHERE C.CATEGORY_CODE IN (
		    SELECT CATEGORY_CODE
		    FROM CATEGORY
		    WHERE PARENT_ID = ?
		    )
		AND CLASS_STATUS = 1
	</entry>
	
	<!-- 클래스 정보 업데이트 -->
	<entry key="updateClass">
		UPDATE CLASS c
		SET 
		    CLASS_NAME = ?, 
		    CLASS_INTRO = ?, 
		    CLASS_PHOTO = ?, 
		    CLASS_URL = ?, 
		    CLASS_PRICE = ?, 
		    CATEGORY_CODE = (SELECT CATEGORY_CODE FROM CATEGORY WHERE CATEGORY_NAME = ?)
		WHERE 
		    CLASS_NO = ?
	</entry>
	
	<!-- 소분류로 클래스 가져오기 -->
	<entry key="getClasses">
		SELECT C.*, M.MEMBER_NM, NVL(CR.리뷰수, 0) AS 리뷰수, NVL(TRUNC(CR.평점, 1), 0) AS 평점, C.CLASS_CREATE_DT AS 날짜
		FROM CLASS C
		JOIN MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN (
		    SELECT C.CLASS_NO, COUNT(R.CLASS_NO) AS 리뷰수, AVG(R.REVIEW_STAR) AS 평점
		    FROM CLASS C
		    LEFT JOIN REVIEW R ON C.CLASS_NO = R.CLASS_NO
		    GROUP BY C.CLASS_NO) CR ON C.CLASS_NO = CR.CLASS_NO
		WHERE CATEGORY_CODE = ? AND CLASS_STATUS = 1
	</entry>
	
	<!-- 클래스 디테일 페이지 조회 -->
	<entry key="getClass">
		SELECT C.*, M.MEMBER_NM, M.MEMBER_PROFILE, T.CATEGORY_NAME SUB, 
		    (SELECT CATEGORY_NAME
		     FROM CATEGORY
		     WHERE CATEGORY_CODE = T.PARENT_ID) AS MAIN, NVL(CR.리뷰수, 0) AS 리뷰수, NVL(TRUNC(CR.평점, 1), 0) AS 평점
		FROM CLASS C
		JOIN MEMBER M ON M.MEMBER_NO = C.MEMBER_NO
		JOIN CATEGORY T ON C.CATEGORY_CODE = T.CATEGORY_CODE
		LEFT JOIN (
		    SELECT C2.CLASS_NO, COUNT(R.CLASS_NO) AS 리뷰수, AVG(R.REVIEW_STAR) AS 평점
		    FROM CLASS C2
		    LEFT JOIN REVIEW R ON C2.CLASS_NO = R.CLASS_NO
		    GROUP BY C2.CLASS_NO) CR ON C.CLASS_NO = CR.CLASS_NO
		WHERE C.CLASS_NO = ? AND CLASS_STATUS = 1
	</entry>
	
	<!-- 튜터 소개 가져오기 -->
	<entry key="getTutorIntro">
		SELECT TUTOR_PROFILE, TUTOR_INTRODUCER, MEMBER_NM
		FROM TUTOR
		JOIN MEMBER USING (MEMBER_NO)
		WHERE MEMBER_NO = ?
	</entry>
	
	<!-- 클래스 번호로 튜터 정보 가져오기 -->
	<entry key="getTutorIntroClass">
		SELECT TUTOR_PROFILE, TUTOR_INTRODUCER, MEMBER_NM
		FROM CLASS
		JOIN MEMBER USING (MEMBER_NO)
		JOIN TUTOR USING (MEMBER_NO)
		WHERE CLASS_NO = ?
	</entry>
	
	<!-- 클래스 번호로 클래스 지우기 -->
	<entry key="deleteClass">
		UPDATE CLASS
		SET CLASS_STATUS = 2
		WHERE CLASS_NO = ?
	</entry>
	
	
	<!-- 다음 클래스 번호 가져오기 -->
	<entry key="nextClassNo">
		SELECT SEQ_CLASS_NO.NEXTVAL FROM DUAL
	</entry>
	
	<!-- 새 클래스 삽입 -->
	<entry key="insertClass">
		INSERT INTO CLASS
		VALUES(?, ?, ?, ?, ?, DEFAULT, DEFAULT, ?, ?, ?)
	</entry>
	
	<!-- 현재 로그인된 멤버가 올린 클래스인 경우 찾기 -->
	<entry key="checkMyClass">
		SELECT *
		FROM CLASS
		WHERE MEMBER_NO = ? AND CLASS_NO = ?
	</entry>
	
	<!-- 멤버 번호, 클래스 번호로 구매한 클래스인지 확인 -->
	<entry key="checkPaidClass">
		SELECT *
		FROM PAID P 
		JOIN CLASS C ON (P.CLASS_NO=C.CLASS_NO)
		WHERE P.MEMBER_NO=? AND C.CLASS_NO = ? AND CLASS_STATUS = 1
	</entry>
	
	<!-- 결제항목 paid 테이블에 추가 -->
	<entry key="insertPaid">
		INSERT INTO PAID VALUES(?, ?, ?, DEFAULT, DEFAULT)
	</entry>
	
	<entry key="selectReview">
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, TO_CHAR(B.CREATED_DT, 'YY-MM-DD'), TO_CHAR(B.UPDATE_DT, 'YY-MM-DD'), B.BOARD_ST, M.MEMBER_NM, R.REVIEW_STAR, R.CLASS_NO as parents , H.TAG_NAME , (SELECT COUNT(*) FROM REPORT WHERE B.BOARD_NO=BOARD_NO) AS REPORT, (SELECT COUNT(*) FROM THUMBS WHERE B.BOARD_NO=BOARD_NO) AS THUMBS, M.MEMBER_PROFILE, C.CLASS_NAME, INSTRUCTOR.MEMBER_NM AS INSTRUCTOR_NAME , C.CLASS_PHOTO 
		FROM BOARD B
		JOIN REVIEW R ON (B.BOARD_NO=R.BOARD_NO)
		LEFT JOIN HASHTAG H ON (B.BOARD_NO=H.BOARD_NO)
		JOIN MEMBER M ON (B.MEMBER_NO=M.MEMBER_NO)
		JOIN CLASS C ON (R.CLASS_NO = C.CLASS_NO)
		JOIN MEMBER INSTRUCTOR ON (C.MEMBER_NO = INSTRUCTOR.MEMBER_NO)
		WHERE BOARD_CD=2
		AND BOARD_ST=1
	</entry>
	
	<entry key="selectReviewThumbs">
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, TO_CHAR(B.CREATED_DT, 'YY-MM-DD'), TO_CHAR(B.UPDATE_DT, 'YY-MM-DD'), B.BOARD_ST, M.MEMBER_NM, R.REVIEW_STAR, R.CLASS_NO as parents , H.TAG_NAME , (SELECT COUNT(*) FROM REPORT WHERE B.BOARD_NO=BOARD_NO) AS REPORT, (SELECT COUNT(*) FROM THUMBS WHERE B.BOARD_NO=BOARD_NO) AS THUMBS, M.MEMBER_PROFILE, C.CLASS_NAME, INSTRUCTOR.MEMBER_NM AS INSTRUCTOR_NAME , C.CLASS_PHOTO
		FROM BOARD B
		JOIN REVIEW R ON (B.BOARD_NO=R.BOARD_NO)
		LEFT JOIN HASHTAG H ON (B.BOARD_NO=H.BOARD_NO)
		JOIN MEMBER M ON (B.MEMBER_NO=M.MEMBER_NO)
		JOIN CLASS C ON (R.CLASS_NO = C.CLASS_NO)
		JOIN MEMBER INSTRUCTOR ON (C.MEMBER_NO = INSTRUCTOR.MEMBER_NO)
		WHERE BOARD_CD=2
		AND BOARD_ST=1
		ORDER BY THUMBS	
	</entry>


	<entry key="chatting"> 
		SELECT
		    F.MEMBER_NM AS CHAT_FROM_NAME,
		    T.MEMBER_NM AS CHAT_TO_NAME,
		    C.CHAT_MESSAGE,
		    TO_CHAR(C.CHAT_TIMESTAMP, 'MM-DD, HH24:MI:SS')
		FROM
		    CHATTING C
		JOIN
		    MEMBER F ON C.CHAT_FROM = F.MEMBER_NO
		JOIN
			MEMBER T ON C.CHAT_TO = T.MEMBER_NO
		WHERE F.MEMBER_NO=? AND T.MEMBER_NM=?
			OR T.MEMBER_NO=? AND F.MEMBER_NM=?
		ORDER BY
		    C.CHAT_TIMESTAMP
	</entry>
	
	<entry key ="myLecture">
		SELECT C.CLASS_NO , C.CLASS_NAME 
		FROM PAID P 
		JOIN CLASS C ON (P.CLASS_NO=C.CLASS_NO)
		WHERE P.MEMBER_NO=?
	</entry>
	
	<entry key ="writeBoard">
		INSERT INTO BOARD VALUES (SEQ_BOARD_NO.NEXTVAL, ?, ?, SYSDATE, DEFAULT, DEFAULT, 1, ?, 2)
	</entry>
	
	<entry key="writeReview">
		INSERT INTO REVIEW VALUES (SEQ_BOARD_NO.CURRVAL, ?, ?)
	</entry>
	
	<entry key="writeTag">
		INSERT INTO HASHTAG VALUES (SEQ_TAG_NO.NEXTVAL, ?, NULL, SEQ_BOARD_NO.CURRVAL)
	</entry>
	
	<entry key="updateForm">
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, TO_CHAR(B.CREATED_DT, 'YY-MM-DD'), TO_CHAR(B.UPDATE_DT, 'YY-MM-DD'), B.BOARD_ST, M.MEMBER_NM, R.REVIEW_STAR, R.CLASS_NO as parents , H.TAG_NAME , (SELECT COUNT(*) FROM REPORT R WHERE B.BOARD_NO=R.BOARD_NO) AS REPORT, (SELECT COUNT(*) FROM THUMBS T WHERE B.BOARD_NO=T.BOARD_NO) AS THUMBS, M.MEMBER_PROFILE, C.CLASS_NAME, INSTRUCTOR.MEMBER_NM AS INSTRUCTOR_NAME , C.CLASS_PHOTO 
		FROM BOARD B
		JOIN REVIEW R ON (B.BOARD_NO=R.BOARD_NO)
		LEFT JOIN HASHTAG H ON (B.BOARD_NO=H.BOARD_NO)
		JOIN MEMBER M ON (B.MEMBER_NO=M.MEMBER_NO)
		JOIN CLASS C ON (R.CLASS_NO = C.CLASS_NO)
		JOIN MEMBER INSTRUCTOR ON (C.MEMBER_NO = INSTRUCTOR.MEMBER_NO)
		WHERE BOARD_CD=2
		AND BOARD_ST=1
		AND B.BOARD_NO=?
	</entry>
	
	<entry key="updateBoard">
		UPDATE BOARD
		SET (BOARD_TITLE, BOARD_CONTENT, UPDATE_DT) = 
		    (SELECT ?, ?, SYSDATE 
		     FROM MEMBER 
		     WHERE MEMBER.MEMBER_NO = BOARD.MEMBER_NO)
		WHERE BOARD_NO = ?
		  AND EXISTS (SELECT 1 
		              FROM MEMBER 
		              WHERE MEMBER.MEMBER_NO = BOARD.MEMBER_NO)	
	</entry>
		
	<entry key="updateReview">
		UPDATE REVIEW
		SET REVIEW_STAR=?
		WHERE BOARD_NO=?
	</entry>
		
	<entry key="updateTag">
		UPDATE HASHTAG
		SET TAG_NAME = ?
		WHERE BOARD_NO=?
	</entry>
	
	<entry key="deleteReview">
		UPDATE BOARD SET BOARD_ST=2 WHERE BOARD_NO = ?
	</entry>
	
	<entry key="thumbsReview">
		INSERT INTO THUMBS VALUES(?, 
		(SELECT MEMBER_NO
		FROM MEMBER
		WHERE MEMBER_NM=?)
		)
	</entry>
	
	<entry key="delThumbsReview">
		DELETE THUMBS WHERE BOARD_NO=?
		AND MEMBER_NO=(SELECT MEMBER_NO
		FROM MEMBER
		WHERE MEMBER_NM=?)
	</entry>
	
	<entry key="countThumbs">
		SELECT COUNT(*) FROM THUMBS WHERE BOARD_NO=?
	</entry>
	
	<entry key="searchReview">
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, TO_CHAR(B.CREATED_DT, 'YY-MM-DD'), TO_CHAR(B.UPDATE_DT, 'YY-MM-DD'), B.BOARD_ST, M.MEMBER_NM, R.REVIEW_STAR, R.CLASS_NO as parents , H.TAG_NAME , (SELECT COUNT(*) FROM REPORT R WHERE B.BOARD_NO=R.BOARD_NO) AS REPORT, (SELECT COUNT(*) FROM THUMBS T WHERE B.BOARD_NO=T.BOARD_NO) AS THUMBS, M.MEMBER_PROFILE, C.CLASS_NAME, INSTRUCTOR.MEMBER_NM AS INSTRUCTOR_NAME , C.CLASS_PHOTO 
		FROM BOARD B
		JOIN REVIEW R ON (B.BOARD_NO=R.BOARD_NO)
		LEFT JOIN HASHTAG H ON (B.BOARD_NO=H.BOARD_NO)
		JOIN MEMBER M ON (B.MEMBER_NO=M.MEMBER_NO)
		JOIN CLASS C ON (R.CLASS_NO = C.CLASS_NO)
		JOIN MEMBER INSTRUCTOR ON (C.MEMBER_NO = INSTRUCTOR.MEMBER_NO)
		WHERE BOARD_CD=2
		AND BOARD_ST=1
		AND BOARD_TITLE LIKE ?
		OR (BOARD_CONTENT LIKE ?)
		OR (M.MEMBER_NM LIKE ?)
		OR (CLASS_NAME LIKE ?)
		OR (INSTRUCTOR.MEMBER_NM LIKE ?)
	</entry>
	
	
</properties>
